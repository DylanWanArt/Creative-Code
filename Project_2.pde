/*
Dylan Wan 10/3/22


How to interact: starting at the top left, slowly trace the border of the canvas clockwise with your 
mouse to see the window throughout the day

This piece was inspired by the elaborate stained glass windows that can be found in 
Catholic churches.  

*/


//canvas

void setup(){
  size(500,600);
}



void draw(){
background (0);

//moon
float moon= map(mouseY, -5, 600,0,255);
float moonPosition= map(mouseX, 500, 0,130,460);
fill(255,255,255,moon);
circle(moonPosition,240,180);

 
//left to right color hue change background for G, B, opacity  
float sunsetG= map(mouseX, 100, 500, 255, 177);
float sunsetB= map(mouseX, 100, 500, 255, 0 );
float sunsetOpacity= map(mouseY, 0, 600, 255, 0);


color timeofday= color(255, sunsetG, sunsetB, sunsetOpacity);


fill(timeofday);



stroke(0);
strokeWeight (2);
beginShape();
vertex(150,500);
vertex(150, 250);
bezierVertex(160,150,220,125,250,100);
bezierVertex(280,125,340,150,350,250);
vertex(350,500);
endShape(CLOSE); 




//glass tiles, w20, h40

//tile colors
int opacity=100;
color pink= color(255,82,247,opacity);
color blue= color(49,46,255,opacity);
color green= color(0,137,33,opacity);
color red= color(255,41,41,opacity);


//tile coordinates
int y1=500;
int y2=480;
int y3=500;
int y4=520;

int x1=140;
int x2=150;
int x3=160;
int x4=150;


strokeWeight(1);
fill(pink);
quad(x1,y1,x2,y2,x3,y3,x4,y4);
quad(x1+20,y1,x2+20,y2,x3+20,y3,x4+20,y4);
quad(x1+40,y1,x2+40,y2,x3+40,y3,x4+40,y4);
quad(x1+60,y1,x2+60,y2,x3+60,y3,x4+60,y4);
quad(x1+80,y1,x2+80,y2,x3+80,y3,x4+80,y4);
quad(x1+100,y1,x2+100,y2,x3+100,y3,x4+100,y4);
quad(x1+120,y1,x2+120,y2,x3+120,y3,x4+120,y4);
quad(x1+140,y1,x2+140,y2,x3+140,y3,x4+140,y4);
quad(x1+160,y1,x2+160,y2,x3+160,y3,x4+160,y4);
quad(x1+180,y1,x2+180,y2,x3+180,y3,x4+180,y4);
quad(x1+200,y1,x2+200,y2,x3+200,y3,x4+200,y4);


//third row
fill(blue);
quad(x1,y1-40,x2,y2-40,x3,y3-40,x4,y4-40);
quad(x1+20,y1-40,x2+20,y2-40,x3+20,y3-40,x4+20,y4-40);
quad(x1+40,y1-40,x2+40,y2-40,x3+40,y3-40,x4+40,y4-40);
quad(x1+60,y1-40,x2+60,y2-40,x3+60,y3-40,x4+60,y4-40);
quad(x1+80,y1-40,x2+80,y2-40,x3+80,y3-40,x4+80,y4-40);
quad(x1+100,y1-40,x2+100,y2-40,x3+100,y3-40,x4+100,y4-40);
quad(x1+120,y1-40,x2+120,y2-40,x3+120,y3-40,x4+120,y4-40);
quad(x1+140,y1-40,x2+140,y2-40,x3+140,y3-40,x4+140,y4-40);
quad(x1+160,y1-40,x2+160,y2-40,x3+160,y3-40,x4+160,y4-40);
quad(x1+180,y1-40,x2+180,y2-40,x3+180,y3-40,x4+180,y4-40);
quad(x1+200,y1-40,x2+200,y2-40,x3+200,y3-40,x4+200,y4-40);


//fifth row y-80
quad(x1,y1-80,x2,y2-80,x3,y3-80,x4,y4-80);
quad(x1+20,y1-80,x2+20,y2-80,x3+20,y3-80,x4+20,y4-80);
quad(x1+40,y1-80,x2+40,y2-80,x3+40,y3-80,x4+40,y4-80);
quad(x1+60,y1-80,x2+60,y2-80,x3+60,y3-80,x4+60,y4-80);
quad(x1+80,y1-80,x2+80,y2-80,x3+80,y3-80,x4+80,y4-80);
quad(x1+100,y1-80,x2+100,y2-80,x3+100,y3-80,x4+100,y4-80);
quad(x1+120,y1-80,x2+120,y2-80,x3+120,y3-80,x4+120,y4-80);
quad(x1+140,y1-80,x2+140,y2-80,x3+140,y3-80,x4+140,y4-80);
quad(x1+160,y1-80,x2+160,y2-80,x3+160,y3-80,x4+160,y4-80);
quad(x1+180,y1-80,x2+180,y2-80,x3+180,y3-80,x4+180,y4-80);
quad(x1+200,y1-80,x2+200,y2-80,x3+200,y3-80,x4+200,y4-80);

//seventh row, y-120
fill(pink);
quad(x1,y1-120,x2,y2-120,x3,y3-120,x4,y4-120);
quad(x1+20,y1-120,x2+20,y2-120,x3+20,y3-120,x4+20,y4-120);
quad(x1+40,y1-120,x2+40,y2-120,x3+40,y3-120,x4+40,y4-120);
quad(x1+60,y1-120,x2+60,y2-120,x3+60,y3-120,x4+60,y4-120);
quad(x1+80,y1-120,x2+80,y2-120,x3+80,y3-120,x4+80,y4-120);
quad(x1+100,y1-120,x2+100,y2-120,x3+100,y3-120,x4+100,y4-120);
quad(x1+120,y1-120,x2+120,y2-120,x3+120,y3-120,x4+120,y4-120);
quad(x1+140,y1-120,x2+140,y2-120,x3+140,y3-120,x4+140,y4-120);
quad(x1+160,y1-120,x2+160,y2-120,x3+160,y3-120,x4+160,y4-120);
quad(x1+180,y1-120,x2+180,y2-120,x3+180,y3-120,x4+180,y4-120);
quad(x1+200,y1-120,x2+200,y2-120,x3+200,y3-120,x4+200,y4-120);

//ninth row, y-160
fill(pink);
quad(x1,y1-160,x2,y2-160,x3,y3-160,x4,y4-160);
quad(x1+20,y1-160,x2+20,y2-160,x3+20,y3-160,x4+20,y4-160);
quad(x1+40,y1-160,x2+40,y2-160,x3+40,y3-160,x4+40,y4-160);
quad(x1+60,y1-160,x2+60,y2-160,x3+60,y3-160,x4+60,y4-160);
quad(x1+80,y1-160,x2+80,y2-160,x3+80,y3-160,x4+80,y4-160);
quad(x1+100,y1-160,x2+100,y2-160,x3+100,y3-160,x4+100,y4-160);
quad(x1+120,y1-160,x2+120,y2-160,x3+120,y3-160,x4+120,y4-160);
quad(x1+140,y1-160,x2+140,y2-160,x3+140,y3-160,x4+140,y4-160);
quad(x1+160,y1-160,x2+160,y2-160,x3+160,y3-160,x4+160,y4-160);
quad(x1+180,y1-160,x2+180,y2-160,x3+180,y3-160,x4+180,y4-160);
quad(x1+200,y1-160,x2+200,y2-160,x3+200,y3-160,x4+200,y4-160);

//eleventh row, y-200
fill(blue);
quad(x1,y1-200,x2,y2-200,x3,y3-200,x4,y4-200);
quad(x1+20,y1-200,x2+20,y2-200,x3+20,y3-200,x4+20,y4-200);
quad(x1+40,y1-200,x2+40,y2-200,x3+40,y3-200,x4+40,y4-200);
quad(x1+60,y1-200,x2+60,y2-200,x3+60,y3-200,x4+60,y4-200);
quad(x1+80,y1-200,x2+80,y2-200,x3+80,y3-200,x4+80,y4-200);
quad(x1+100,y1-200,x2+100,y2-200,x3+100,y3-200,x4+100,y4-200);
quad(x1+120,y1-200,x2+120,y2-200,x3+120,y3-200,x4+120,y4-200);
quad(x1+140,y1-200,x2+140,y2-200,x3+140,y3-200,x4+140,y4-200);
quad(x1+160,y1-200,x2+160,y2-200,x3+160,y3-200,x4+160,y4-200);
quad(x1+180,y1-200,x2+180,y2-200,x3+180,y3-200,x4+180,y4-200);
quad(x1+200,y1-200,x2+200,y2-200,x3+200,y3-200,x4+200,y4-200);

//thirteenth row, y-240
fill(blue);
quad(x1,y1-240,x2,y2-240,x3,y3-240,x4,y4-240);
quad(x1+20,y1-240,x2+20,y2-240,x3+20,y3-240,x4+20,y4-240);
quad(x1+40,y1-240,x2+40,y2-240,x3+40,y3-240,x4+40,y4-240);
quad(x1+60,y1-240,x2+60,y2-240,x3+60,y3-240,x4+60,y4-240);
quad(x1+80,y1-240,x2+80,y2-240,x3+80,y3-240,x4+80,y4-240);
quad(x1+100,y1-240,x2+100,y2-240,x3+100,y3-240,x4+100,y4-240);
quad(x1+120,y1-240,x2+120,y2-240,x3+120,y3-240,x4+120,y4-240);
quad(x1+140,y1-240,x2+140,y2-240,x3+140,y3-240,x4+140,y4-240);
quad(x1+160,y1-240,x2+160,y2-240,x3+160,y3-240,x4+160,y4-240);
quad(x1+180,y1-240,x2+180,y2-240,x3+180,y3-240,x4+180,y4-240);
quad(x1+200,y1-240,x2+200,y2-240,x3+200,y3-240,x4+200,y4-240);


//fifteenth row, y-280
fill(red);
quad(x1,y1-280,x2,y2-280,x3,y3-280,x4,y4-280);
quad(x1+20,y1-280,x2+20,y2-280,x3+20,y3-280,x4+20,y4-280);
quad(x1+40,y1-280,x2+40,y2-280,x3+40,y3-280,x4+40,y4-280);
quad(x1+60,y1-280,x2+60,y2-280,x3+60,y3-280,x4+60,y4-280);
quad(x1+80,y1-280,x2+80,y2-280,x3+80,y3-280,x4+80,y4-280);
quad(x1+100,y1-280,x2+100,y2-280,x3+100,y3-280,x4+100,y4-280);
quad(x1+120,y1-280,x2+120,y2-280,x3+120,y3-280,x4+120,y4-280);
quad(x1+140,y1-280,x2+140,y2-280,x3+140,y3-280,x4+140,y4-280);
quad(x1+160,y1-280,x2+160,y2-280,x3+160,y3-280,x4+160,y4-280);
quad(x1+180,y1-280,x2+180,y2-280,x3+180,y3-280,x4+180,y4-280);
quad(x1+200,y1-280,x2+200,y2-280,x3+200,y3-280,x4+200,y4-280);

//seventeenth row, y-320
fill(red);
quad(x1+20,y1-320,x2+20,y2-320,x3+20,y3-320,x4+20,y4-320);
quad(x1+40,y1-320,x2+40,y2-320,x3+40,y3-320,x4+40,y4-320);
quad(x1+60,y1-320,x2+60,y2-320,x3+60,y3-320,x4+60,y4-320);
quad(x1+80,y1-320,x2+80,y2-320,x3+80,y3-320,x4+80,y4-320);
quad(x1+100,y1-320,x2+100,y2-320,x3+100,y3-320,x4+100,y4-320);
quad(x1+120,y1-320,x2+120,y2-320,x3+120,y3-320,x4+120,y4-320);
quad(x1+140,y1-320,x2+140,y2-320,x3+140,y3-320,x4+140,y4-320);
quad(x1+160,y1-320,x2+160,y2-320,x3+160,y3-320,x4+160,y4-320);
quad(x1+180,y1-320,x2+180,y2-320,x3+180,y3-320,x4+180,y4-320);


//ninteenth row, y-360
fill(pink);
quad(x1+40,y1-360,x2+40,y2-360,x3+40,y3-360,x4+40,y4-360);
quad(x1+60,y1-360,x2+60,y2-360,x3+60,y3-360,x4+60,y4-360);
quad(x1+80,y1-360,x2+80,y2-360,x3+80,y3-360,x4+80,y4-360);
quad(x1+100,y1-360,x2+100,y2-360,x3+100,y3-360,x4+100,y4-360);
quad(x1+120,y1-360,x2+120,y2-360,x3+120,y3-360,x4+120,y4-360);
quad(x1+140,y1-360,x2+140,y2-360,x3+140,y3-360,x4+140,y4-360);
quad(x1+160,y1-360,x2+160,y2-360,x3+160,y3-360,x4+160,y4-360);

//twenty first row, y-400
fill (pink);
quad(x1+80,y1-400,x2+80,y2-400,x3+80,y3-400,x4+80,y4-400);
quad(x1+100,y1-400,x2+100,y2-400,x3+100,y3-400,x4+100,y4-400);
quad(x1+120,y1-400,x2+120,y2-400,x3+120,y3-400,x4+120,y4-400);



//even rows
//second row x+10, y-20
fill(red);
quad(x1+10,y1-20,x2+10,y2-20,x3+10,y3-20,x4+10,y4-20);
quad(x1+30,y1-20,x2+30,y2-20,x3+30,y3-20,x4+30,y4-20);
quad(x1+50,y1-20,x2+50,y2-20,x3+50,y3-20,x4+50,y4-20);
quad(x1+70,y1-20,x2+70,y2-20,x3+70,y3-20,x4+70,y4-20);
quad(x1+90,y1-20,x2+90,y2-20,x3+90,y3-20,x4+90,y4-20);
quad(x1+110,y1-20,x2+110,y2-20,x3+110,y3-20,x4+110,y4-20);
quad(x1+130,y1-20,x2+130,y2-20,x3+130,y3-20,x4+130,y4-20);
quad(x1+150,y1-20,x2+150,y2-20,x3+150,y3-20,x4+150,y4-20);
quad(x1+170,y1-20,x2+170,y2-20,x3+170,y3-20,x4+170,y4-20);
quad(x1+190,y1-20,x2+190,y2-20,x3+190,y3-20,x4+190,y4-20);

//fourth row y-40
fill(green);
quad(x1+10,y1-60,x2+10,y2-60,x3+10,y3-60,x4+10,y4-60);
quad(x1+30,y1-60,x2+30,y2-60,x3+30,y3-60,x4+30,y4-60);
quad(x1+50,y1-60,x2+50,y2-60,x3+50,y3-60,x4+50,y4-60);
quad(x1+70,y1-60,x2+70,y2-60,x3+70,y3-60,x4+70,y4-60);
quad(x1+90,y1-60,x2+90,y2-60,x3+90,y3-60,x4+90,y4-60);
quad(x1+110,y1-60,x2+110,y2-60,x3+110,y3-60,x4+110,y4-60);
quad(x1+130,y1-60,x2+130,y2-60,x3+130,y3-60,x4+130,y4-60);
quad(x1+150,y1-60,x2+150,y2-60,x3+150,y3-60,x4+150,y4-60);
quad(x1+170,y1-60,x2+170,y2-60,x3+170,y3-60,x4+170,y4-60);
quad(x1+190,y1-60,x2+190,y2-60,x3+190,y3-60,x4+190,y4-60);

//sixth row, y-80
fill(red);
quad(x1+10,y1-100,x2+10,y2-100,x3+10,y3-100,x4+10,y4-100);
quad(x1+30,y1-100,x2+30,y2-100,x3+30,y3-100,x4+30,y4-100);
quad(x1+50,y1-100,x2+50,y2-100,x3+50,y3-100,x4+50,y4-100);
quad(x1+70,y1-100,x2+70,y2-100,x3+70,y3-100,x4+70,y4-100);
quad(x1+90,y1-100,x2+90,y2-100,x3+90,y3-100,x4+90,y4-100);
quad(x1+110,y1-100,x2+110,y2-100,x3+110,y3-100,x4+110,y4-100);
quad(x1+130,y1-100,x2+130,y2-100,x3+130,y3-100,x4+130,y4-100);
quad(x1+150,y1-100,x2+150,y2-100,x3+150,y3-100,x4+150,y4-100);
quad(x1+170,y1-100,x2+170,y2-100,x3+170,y3-100,x4+170,y4-100);
quad(x1+190,y1-100,x2+190,y2-100,x3+190,y3-100,x4+190,y4-100);

//eighth row y-140
quad(x1+10,y1-140,x2+10,y2-140,x3+10,y3-140,x4+10,y4-140);
quad(x1+30,y1-140,x2+30,y2-140,x3+30,y3-140,x4+30,y4-140);
quad(x1+50,y1-140,x2+50,y2-140,x3+50,y3-140,x4+50,y4-140);
quad(x1+70,y1-140,x2+70,y2-140,x3+70,y3-140,x4+70,y4-140);
quad(x1+90,y1-140,x2+90,y2-140,x3+90,y3-140,x4+90,y4-140);
quad(x1+110,y1-140,x2+110,y2-140,x3+110,y3-140,x4+110,y4-140);
quad(x1+130,y1-140,x2+130,y2-140,x3+130,y3-140,x4+130,y4-140);
quad(x1+150,y1-140,x2+150,y2-140,x3+150,y3-140,x4+150,y4-140);
quad(x1+170,y1-140,x2+170,y2-140,x3+170,y3-140,x4+170,y4-140);
quad(x1+190,y1-140,x2+190,y2-140,x3+190,y3-140,x4+190,y4-140);


//tenth row y-180
fill(green);
quad(x1+10,y1-180,x2+10,y2-180,x3+10,y3-180,x4+10,y4-180);
quad(x1+30,y1-180,x2+30,y2-180,x3+30,y3-180,x4+30,y4-180);
quad(x1+50,y1-180,x2+50,y2-180,x3+50,y3-180,x4+50,y4-180);
quad(x1+70,y1-180,x2+70,y2-180,x3+70,y3-180,x4+70,y4-180);
quad(x1+90,y1-180,x2+90,y2-180,x3+90,y3-180,x4+90,y4-180);
quad(x1+110,y1-180,x2+110,y2-180,x3+110,y3-180,x4+110,y4-180);
quad(x1+130,y1-180,x2+130,y2-180,x3+130,y3-180,x4+130,y4-180);
quad(x1+150,y1-180,x2+150,y2-180,x3+150,y3-180,x4+150,y4-180);
quad(x1+170,y1-180,x2+170,y2-180,x3+170,y3-180,x4+170,y4-180);
quad(x1+190,y1-180,x2+190,y2-180,x3+190,y3-180,x4+190,y4-180);

//twelfth row, y-220
fill(pink);
quad(x1+10,y1-220,x2+10,y2-220,x3+10,y3-220,x4+10,y4-220);
quad(x1+30,y1-220,x2+30,y2-220,x3+30,y3-220,x4+30,y4-220);
quad(x1+50,y1-220,x2+50,y2-220,x3+50,y3-220,x4+50,y4-220);
quad(x1+70,y1-220,x2+70,y2-220,x3+70,y3-220,x4+70,y4-220);
quad(x1+90,y1-220,x2+90,y2-220,x3+90,y3-220,x4+90,y4-220);
quad(x1+110,y1-220,x2+110,y2-220,x3+110,y3-220,x4+110,y4-220);
quad(x1+130,y1-220,x2+130,y2-220,x3+130,y3-220,x4+130,y4-220);
quad(x1+150,y1-220,x2+150,y2-220,x3+150,y3-220,x4+150,y4-220);
quad(x1+170,y1-220,x2+170,y2-220,x3+170,y3-220,x4+170,y4-220);
quad(x1+190,y1-220,x2+190,y2-220,x3+190,y3-220,x4+190,y4-220);

//fourteenth row, y-260
fill(green);
quad(x1+10,y1-260,x2+10,y2-260,x3+10,y3-260,x4+10,y4-260);
quad(x1+30,y1-260,x2+30,y2-260,x3+30,y3-260,x4+30,y4-260);
quad(x1+50,y1-260,x2+50,y2-260,x3+50,y3-260,x4+50,y4-260);
quad(x1+70,y1-260,x2+70,y2-260,x3+70,y3-260,x4+70,y4-260);
quad(x1+90,y1-260,x2+90,y2-260,x3+90,y3-260,x4+90,y4-260);
quad(x1+110,y1-260,x2+110,y2-260,x3+110,y3-260,x4+110,y4-260);
quad(x1+130,y1-260,x2+130,y2-260,x3+130,y3-260,x4+130,y4-260);
quad(x1+150,y1-260,x2+150,y2-260,x3+150,y3-260,x4+150,y4-260);
quad(x1+170,y1-260,x2+170,y2-260,x3+170,y3-260,x4+170,y4-260);
quad(x1+190,y1-260,x2+190,y2-260,x3+190,y3-260,x4+190,y4-260);

//sixteenth row, y-300
fill(blue);
quad(x1+10,y1-300,x2+10,y2-300,x3+10,y3-300,x4+10,y4-300);
quad(x1+30,y1-300,x2+30,y2-300,x3+30,y3-300,x4+30,y4-300);
quad(x1+50,y1-300,x2+50,y2-300,x3+50,y3-300,x4+50,y4-300);
quad(x1+70,y1-300,x2+70,y2-300,x3+70,y3-300,x4+70,y4-300);
quad(x1+90,y1-300,x2+90,y2-300,x3+90,y3-300,x4+90,y4-300);
quad(x1+110,y1-300,x2+110,y2-300,x3+110,y3-300,x4+110,y4-300);
quad(x1+130,y1-300,x2+130,y2-300,x3+130,y3-300,x4+130,y4-300);
quad(x1+150,y1-300,x2+150,y2-300,x3+150,y3-300,x4+150,y4-300);
quad(x1+170,y1-300,x2+170,y2-300,x3+170,y3-300,x4+170,y4-300);
quad(x1+190,y1-300,x2+190,y2-300,x3+190,y3-300,x4+190,y4-300);

//eighteenth row, y-340
quad(x1+30,y1-340,x2+30,y2-340,x3+30,y3-340,x4+30,y4-340);
quad(x1+50,y1-340,x2+50,y2-340,x3+50,y3-340,x4+50,y4-340);
quad(x1+70,y1-340,x2+70,y2-340,x3+70,y3-340,x4+70,y4-340);
quad(x1+90,y1-340,x2+90,y2-340,x3+90,y3-340,x4+90,y4-340);
quad(x1+110,y1-340,x2+110,y2-340,x3+110,y3-340,x4+110,y4-340);
quad(x1+130,y1-340,x2+130,y2-340,x3+130,y3-340,x4+130,y4-340);
quad(x1+150,y1-340,x2+150,y2-340,x3+150,y3-340,x4+150,y4-340);
quad(x1+170,y1-340,x2+170,y2-340,x3+170,y3-340,x4+170,y4-340);


//twentieth row, y-380
fill(green);
quad(x1+50,y1-380,x2+50,y2-380,x3+50,y3-380,x4+50,y4-380);
quad(x1+70,y1-380,x2+70,y2-380,x3+70,y3-380,x4+70,y4-380);
quad(x1+90,y1-380,x2+90,y2-380,x3+90,y3-380,x4+90,y4-380);
quad(x1+110,y1-380,x2+110,y2-380,x3+110,y3-380,x4+110,y4-380);
quad(x1+130,y1-380,x2+130,y2-380,x3+130,y3-380,x4+130,y4-380);
quad(x1+150,y1-380,x2+150,y2-380,x3+150,y3-380,x4+150,y4-380);


//miscellaneous rows
//5.5, y-100
fill(pink);
quad(x1,y1-100,x2,y2-100,x3,y3-100,x4,y4-100);
quad(x1+20,y1-100,x2+20,y2-100,x3+20,y3-100,x4+20,y4-100);
quad(x1+40,y1-100,x2+40,y2-100,x3+40,y3-100,x4+40,y4-100);
quad(x1+60,y1-100,x2+60,y2-100,x3+60,y3-100,x4+60,y4-100);
quad(x1+80,y1-100,x2+80,y2-100,x3+80,y3-100,x4+80,y4-100);
quad(x1+100,y1-100,x2+100,y2-100,x3+100,y3-100,x4+100,y4-100);
quad(x1+120,y1-100,x2+120,y2-100,x3+120,y3-100,x4+120,y4-100);
quad(x1+140,y1-100,x2+140,y2-100,x3+140,y3-100,x4+140,y4-100);
quad(x1+160,y1-100,x2+160,y2-100,x3+160,y3-100,x4+160,y4-100);
quad(x1+180,y1-100,x2+180,y2-100,x3+180,y3-100,x4+180,y4-100);
quad(x1+200,y1-100,x2+200,y2-100,x3+200,y3-100,x4+200,y4-100);

//2.5
fill(blue);
quad(x1+10,y1-40,x2+10,y2-40,x3+10,y3-40,x4+10,y4-40);
quad(x1+30,y1-40,x2+30,y2-40,x3+30,y3-40,x4+30,y4-40);
quad(x1+50,y1-40,x2+50,y2-40,x3+50,y3-40,x4+50,y4-40);
quad(x1+70,y1-40,x2+70,y2-40,x3+70,y3-40,x4+70,y4-40);
quad(x1+90,y1-40,x2+90,y2-40,x3+90,y3-40,x4+90,y4-40);
quad(x1+110,y1-40,x2+110,y2-40,x3+110,y3-40,x4+110,y4-40);
quad(x1+130,y1-40,x2+130,y2-40,x3+130,y3-40,x4+130,y4-40);
quad(x1+150,y1-40,x2+150,y2-40,x3+150,y3-40,x4+150,y4-40);
quad(x1+170,y1-40,x2+170,y2-40,x3+170,y3-40,x4+170,y4-40);
quad(x1+190,y1-40,x2+190,y2-40,x3+190,y3-40,x4+190,y4-40);

//16.5
fill(blue);
quad(x1+10,y1-320,x2+10,y2-320,x3+10,y3-320,x4+10,y4-320);
quad(x1+30,y1-320,x2+30,y2-320,x3+30,y3-320,x4+30,y4-320);
quad(x1+50,y1-320,x2+50,y2-320,x3+50,y3-320,x4+50,y4-320);
quad(x1+70,y1-320,x2+70,y2-320,x3+70,y3-320,x4+70,y4-320);
quad(x1+90,y1-320,x2+90,y2-320,x3+90,y3-320,x4+90,y4-320);
quad(x1+110,y1-320,x2+110,y2-320,x3+110,y3-320,x4+110,y4-320);
quad(x1+130,y1-320,x2+130,y2-320,x3+130,y3-320,x4+130,y4-320);
quad(x1+150,y1-320,x2+150,y2-320,x3+150,y3-320,x4+150,y4-320);
quad(x1+170,y1-320,x2+170,y2-320,x3+170,y3-320,x4+170,y4-320);
quad(x1+190,y1-320,x2+190,y2-320,x3+190,y3-320,x4+190,y4-320);



//window edge mask
stroke(0);
fill(0);
beginShape();
vertex(150,500);
vertex(150, 250);
bezierVertex(160,150,220,125,250,100);
bezierVertex(280,125,340,150,350,250);
vertex(350,500);
vertex(500,500);
vertex(500,0);
vertex(0,0);
vertex(0,500);
endShape(CLOSE); 

quad(0,500,500,500,500,600,0,600);





//small arches + circle
noFill();
beginShape();
stroke(0);
strokeWeight(15);
vertex(140,510);
vertex(140,280);
bezierVertex(140,250,180,220,200,210);
bezierVertex(210,220,250,250,250,280);
vertex(250,510);
endShape(CLOSE);

noFill();
beginShape();
stroke(0);
strokeWeight(15);
vertex(250,510);
vertex(250,280);
bezierVertex(250,250,285,220,305,210);
bezierVertex(325,220,360,250,360,280);
vertex(360,510);
endShape(CLOSE);

circle(250,175,110);




////black overlay
float blackCast= map(mouseY, -5, 600,0,180);
color black= color(0,0,0,blackCast);
fill(black);
quad(0,50,500,50,500,600,0,600);
}
